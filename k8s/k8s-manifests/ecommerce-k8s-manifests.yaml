# ecommerce-k8s-manifests.yaml

# Backend Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecommerce-backend-sa
  namespace: shopeasy-dev

---
# Backend ConfigMap for non-sensitive configurations
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: shopeasy-dev
data:
  FLASK_APP: "app.py"
  FLASK_RUN_HOST: "0.0.0.0"
  FLASK_RUN_PORT: "5000"
  DB_HOST: "ecommerce-db"
  DB_PORT: "3306"
  DB_NAME: "ecommerce"
  SESSION_TYPE: "filesystem"
  SESSION_FILE_DIR: "/tmp/flask_sessions"
  FLASK_DEBUG: "false"
  FRONTEND_PATH: "/app/frontend"

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommerce-backend
  namespace: shopeasy-dev
  labels:
    app: ecommerce
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ecommerce
      tier: backend
  template:
    metadata:
      labels:
        app: ecommerce
        tier: backend
    spec:
      serviceAccountName: ecommerce-backend-sa
      containers:
      - name: backend
        image: 017820683847.dkr.ecr.us-east-1.amazonaws.com/ecommerce-app-backend:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 5000
        env:
        - name: FLASK_APP
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: FLASK_APP
        - name: FLASK_RUN_HOST
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: FLASK_RUN_HOST
        - name: FLASK_RUN_PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: FLASK_RUN_PORT
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DB_PORT
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DB_NAME
        - name: SESSION_TYPE
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: SESSION_TYPE
        - name: SESSION_FILE_DIR
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: SESSION_FILE_DIR
        - name: FLASK_DEBUG
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: FLASK_DEBUG
        - name: FRONTEND_PATH
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: FRONTEND_PATH
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        volumeMounts:
        - name: flask-sessions
          mountPath: /tmp/flask_sessions
        startupProbe:
          httpGet:
            path: /api/health
            port: http
          failureThreshold: 30
          periodSeconds: 10
          initialDelaySeconds: 15
        readinessProbe:
          httpGet:
            path: /api/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: flask-sessions
        emptyDir: {}

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-backend
  namespace: shopeasy-dev
  labels:
    app: ecommerce
    tier: backend
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: ecommerce
    tier: backend

---
# Backend HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ecommerce-backend-hpa
  namespace: shopeasy-dev
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ecommerce-backend
  minReplicas: 2
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 120

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ecommerce-backend-ingress
  namespace: shopeasy-dev
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /api(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: ecommerce-backend
            port:
              number: 80
      - path: /()(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: ecommerce-backend
            port:
              number: 80

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
  namespace: shopeasy-dev
spec:
  podSelector:
    matchLabels:
      app: ecommerce
      tier: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector: {}
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 5000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: ecommerce
          tier: database
    ports:
    - protocol: TCP
      port: 3306
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Resource Quota
apiVersion: v1
kind: ResourceQuota
metadata:
  name: ecommerce-quota
  namespace: shopeasy-dev
spec:
  hard:
    requests.cpu: "2"
    requests.memory: 4Gi
    limits.cpu: "4"
    limits.memory: 6Gi
    pods: "10"
    services: "5"
    configmaps: "10"
    secrets: "10"
    persistentvolumeclaims: "5"

---
# LimitRange
apiVersion: v1
kind: LimitRange
metadata:
  name: ecommerce-limits
  namespace: shopeasy-dev
spec:
  limits:
  - type: Container
    default:
      cpu: 300m
      memory: 512Mi
    defaultRequest:
      cpu: 100m
      memory: 128Mi
    max:
      cpu: "1"
      memory: 1Gi
    min:
      cpu: 50m
      memory: 64Mi
  - type: Pod
    max:
      cpu: "2"
      memory: 2Gi